package com.hispeed.development.activity.utils;

import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

import javax.crypto.Cipher;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.security.Key;
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;

public class RSAEncryptUtil {
    /** 指定加密算法为RSA */
    public static final String ALGORITHM = "RSA";
    /** 指定key的大小*/
    public static final int KEYSIZE = 2048;
    /** 加密时支持的最大字节数为【证书位数/8 -11】，1024位的证书加密时最大支持117个字节，2048位的证书加密时最大支持245个字节*/
    public static final int MAX_ENCRYPT_SIZE = KEYSIZE / 8 - 11 - 1;
    /** 解密是支持的最大字节数为【证书位数/8】，1024位的证书解密时最大支持128个字节，2048位的证书解密时最大支持256个字节*/
    public static final int MAX_DECRYPT_SIZE = KEYSIZE / 8;
    /** 字符串编码 */
    public static final String CHARSET = "UTF-8";


    /**
     * 分段加密: 公钥加密
     */
    public static String encryptByPublicKey(String data, String key) throws Exception {
        byte[] cryptograph = encrypt_PublicKey(data.getBytes(CHARSET),key);// 生成的密文
        String cryptographStr = safeUrlBase64Encode(cryptograph);//这里不能用new String()来还原字符串
        return cryptographStr;
    }
    /**
     * 分段解密: 私钥解密
     */
    public static String decryptByPrivateKey(String data, String key) throws Exception {
        byte[] d  = safeUrlBase64Decode(data);
        byte[] target = decrypt_PrivateKey(d,key);// 解密密文
        return new String(target, CHARSET);
    }


    public static byte[] encrypt_PublicKey(byte[] data, String publicKey) throws Exception {
        byte[] keyBytes = Base64.getDecoder().decode(publicKey);//使用JDK的util包下的base64实现解码
        X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(keyBytes);
        KeyFactory keyFactory = KeyFactory.getInstance(ALGORITHM);//使用KeyFactory工厂处理公钥
        Key publicK = keyFactory.generatePublic(x509KeySpec);
        // 对数据加密
        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());//使用Cipher.getInstance加密
        cipher.init(Cipher.ENCRYPT_MODE, publicK);
        int inputLen = data.length;
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        int offSet = 0;
        byte[] cache;
        int i = 0;
        // 对数据分段加密
        while (inputLen - offSet > 0) {
            if (inputLen - offSet > MAX_ENCRYPT_SIZE) {
                cache = cipher.doFinal(data, offSet, MAX_ENCRYPT_SIZE);
            } else {
                cache = cipher.doFinal(data, offSet, inputLen - offSet);
            }
            out.write(cache, 0, cache.length);
            i++;
            offSet = i * MAX_ENCRYPT_SIZE;
        }
        byte[] encryptedData = out.toByteArray();
        out.close();
        return encryptedData;
    }


    public static byte[] decrypt_PrivateKey(byte[] encryptedData, String privateKey) throws Exception {
        byte[] keyBytes = Base64.getDecoder().decode(privateKey.getBytes());//使用JDK的util包下的base64实现解码
        PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);
        KeyFactory keyFactory = KeyFactory.getInstance(ALGORITHM);//使用KeyFactory工厂处理私钥
        Key privateK = keyFactory.generatePrivate(pkcs8KeySpec);
        Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());//使用Cipher.getInstance解密
        cipher.init(Cipher.DECRYPT_MODE, privateK);
        int inputLen = encryptedData.length;
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        int offSet = 0;
        byte[] cache;
        int i = 0;
        // 对数据分段解密
        while (inputLen - offSet > 0) {
            if (inputLen - offSet > MAX_DECRYPT_SIZE) {
                cache = cipher.doFinal(encryptedData, offSet, MAX_DECRYPT_SIZE);
            } else {
                cache = cipher.doFinal(encryptedData, offSet, inputLen - offSet);
            }
            out.write(cache, 0, cache.length);
            i++;
            offSet = i * MAX_DECRYPT_SIZE;
        }
        byte[] decryptedData = out.toByteArray();
        out.close();
        return decryptedData;
    }

    public static String safeUrlBase64Encode(byte[] data){
        String encodeBase64 = new BASE64Encoder().encode(data);
        String safeBase64Str = encodeBase64.replace('+', '-');
        safeBase64Str = safeBase64Str.replace('/', '_');
        safeBase64Str = safeBase64Str.replaceAll("=", "");
        return safeBase64Str;
    }
    public static byte[] safeUrlBase64Decode(final String safeBase64Str) throws IOException {
        String base64Str = safeBase64Str.replace('-', '+');
        base64Str = base64Str.replace('_', '/');
        int mod4 = base64Str.length()%4;
        if(mod4 > 0){
            base64Str = base64Str + "====".substring(mod4);
        }
        return new BASE64Decoder().decodeBuffer(base64Str);
    }

}
 
